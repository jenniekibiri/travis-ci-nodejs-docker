# Orb 'circleci/node@5.0.2' resolved to 'circleci/node@5.0.2'
# Orb 'circleci/docker@1.5.0' resolved to 'circleci/docker@1.5.0'
version: 2
jobs:
  build_and_test:
    docker:
    - image: cimg/node:lts
    steps:
    - checkout
    - run:
        command: |-
          # Fail if package.json does not exist in working directory

          if [ ! -f "package.json" ]; then
              echo
              echo "---"
              echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
              echo "---"
              echo
              echo "Current directory: $(pwd)"
              echo
              echo
              echo "List directory: "
              echo
              ls
              exit 1
          fi
        name: Checking for package.json
        working_directory: .
    - run:
        command: |-
          # Link corresponding lock file to a temporary file used by cache commands
          if [ -f "package-lock.json" ]; then
              echo "Found package-lock.json file, assuming lockfile"
              cp package-lock.json /tmp/node-project-lockfile
          elif [ -f "npm-shrinkwrap.json" ]; then
              echo "Found npm-shrinkwrap.json file, assuming lockfile"
              cp npm-shrinkwrap.json /tmp/node-project-lockfile
          elif [ -f "yarn.lock" ]; then
              echo "Found yarn.lock file, assuming lockfile"
              cp yarn.lock /tmp/node-project-lockfile
          fi
          cp package.json /tmp/node-project-package.json
        name: Determine lockfile
        working_directory: .
    - restore_cache:
        keys:
        - node-deps-{{ arch }}-v1-{{ .Branch }}-{{ checksum "/tmp/node-project-lockfile" }}
        - node-deps-{{ arch }}-v1-{{ .Branch }}-{{ checksum "/tmp/node-project-package.json" }}
        - node-deps-{{ arch }}-v1-{{ .Branch }}-
    - run:
        command: |-
          # Configure npm cache path if provided
          if [[ -n "$PARAM_CACHE_PATH" ]]; then
              npm config set cache "$PARAM_CACHE_PATH"
          fi

          # Run override ci command if provided, otherwise run default npm install
          if [[ -n "$PARAM_OVERRIDE_COMMAND" ]]; then
              echo "Running override package installation command:"
              eval "$PARAM_OVERRIDE_COMMAND"
          else
              npm ci
          fi
        environment:
          PARAM_CACHE_PATH: ''
          PARAM_OVERRIDE_COMMAND: ''
        name: Installing NPM packages
        working_directory: .
    - save_cache:
        key: node-deps-{{ arch }}-v1-{{ .Branch }}-{{ checksum "/tmp/node-project-lockfile" }}
        paths:
        - ~/.npm
    - run:
        command: rm -f /tmp/node-project-lockfile /tmp/node-project-package.json /tmp/yarn-zero-lockfile
        name: Remove temporary links
    - run:
        command: npm run test
        name: Run tests
    - run:
        command: npm run build
        name: Build app
    - persist_to_workspace:
        root: ~/project
        paths:
        - .
  build_docker_image:
    docker:
    - image: circleci/node:latest
      auth:
        username: $USERNAME
        password: $PASSWORD
    steps:
    - checkout
    - setup_remote_docker
    - run:
        name: Build docker image
        command: docker build -t jennykibiri/freestyle-jenkins-node-app .
    - run:
        name: Publish Docker image
        command: |
          echo "$PASSWORD" | docker login --username "$USERNAME" --password-stdin
          docker push jennykibiri/freestyle-jenkins-node-app
    environment:
    - IMAGE_NAME: jennykibiri/freestyle-jenkins-node-app
workflows:
  test_my_app:
    jobs:
    - build_and_test
    - build_docker_image:
        requires:
        - build_and_test
  version: 2

# Original config.yml file:
# version: 2.1
# orbs:
#   node: circleci/node@5.0.2
#   docker: circleci/docker@1.5.0
# executors:
#   docker-publisher:
#     environment:
#       IMAGE_NAME: jennykibiri/freestyle-jenkins-node-app
#     docker:
#       - image: circleci/node:latest
#         auth:
#           username: $USERNAME
#           password: $PASSWORD
# 
# jobs:
#   build_and_test:
#     executor: node/default
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - run:
#           command: npm run test
#           name: Run tests
#       - run:
#           command: npm run build
#           name: Build app
#       - persist_to_workspace:
#           root: ~/project
#           paths:
#             - .
# 
#   build_docker_image:
#     executor: docker-publisher
#     steps:
#       - checkout
#       - setup_remote_docker
#       - run:
#           name: Build docker image
#           command: docker build -t jennykibiri/freestyle-jenkins-node-app .
#       - run:
#           name: Publish Docker image
#           command: |
#             echo \"$PASSWORD\" | docker login --username \"$USERNAME\" --password-stdin
#             docker push jennykibiri/freestyle-jenkins-node-app
# 
# workflows:
#   test_my_app:
#     jobs:
#       - build_and_test
#       - build_docker_image:
#           requires:
#           - build_and_test
#       